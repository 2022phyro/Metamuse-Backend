import UserModel, { IUserDocument } from './models'
import {
  IntegrityError,
  NotFoundError,
  ValidationError,
  UnauthorizedError,
  ForbiddenError
} from '../utils/errors' // Adjust the import path as necessary
import { PreSignupModel } from './models'
import { validatePhone, validateUser } from '../utils/validation'
import { encryptPassword, verifyPassword } from '../authentication/encrypt'
import speakeasy from 'speakeasy'
import { type FilterQuery, type SortOrder, type Types } from 'mongoose'
import { OTP_EXPIRY } from '../config/index'
import { paginate, PaginatedDocs } from '@/utils/pagination'
import { deletePreference, deleteProfile } from '@/user/dao'
interface UserParams {
  firstName: string
  phone: string
  lastName: string
  email: string
  password: string
  otp?: string
}
export async function preSignUp(
  phone: string
): Promise<{ token: string, expiry: Date }> {
  if (!validatePhone(phone)) {
    throw new ValidationError('Invalid phone number')
  }
  const secret = speakeasy.generateSecret({ length: 20 })
  let profile
  profile = await PreSignupModel.findOne({ phone })
  if (profile == null) {
    profile = await PreSignupModel.create({
      phone,
      secret: secret.base32
    })
  }
  const token = speakeasy.totp({
    secret: profile.secret,
    encoding: 'base32'
  })
  profile.otpExpires = new Date(Date.now() + OTP_EXPIRY)
  await profile.save()
  return { token, expiry: profile.otpExpires }
}
export async function newOtp(
  phone: string,
  model: 'pre' | 'user' = 'user'
): Promise<{ token: string, expiry: Date }> {
  if (!validatePhone(phone)) {
    throw new ValidationError('Invalid phone number')
  }
  let profile
  if (model === 'pre') profile = await PreSignupModel.findOne({ phone })
  else if (model === 'user') profile = await UserModel.findOne({ phone })
  if (!profile || profile == null) { throw new NotFoundError('User with phone number not found') }
  const token = speakeasy.totp({
    secret: profile.secret,
    encoding: 'base32'
  })
  await profile.save()
  return { token, expiry: new Date(Date.now() + OTP_EXPIRY) }
}
export async function verifyOtp(
  phone: string,
  token: string,
  model: 'pre' | 'user'
): Promise<{ message: string, expires: Date }> {
  if (!validatePhone(phone)) {
    throw new ValidationError('Invalid phone number')
  }
  if (token.length === 0) {
    throw new UnauthorizedError('Invalid OTP')
  }
  let profile
  if (model === 'pre') profile = await PreSignupModel.findOne({ phone })
  else if (model === 'user') profile = await UserModel.findOne({ phone })
  if (profile == null) throw new NotFoundError('User with phone number not found')
  const isVerified = speakeasy.totp.verify({
    secret: profile.secret,
    encoding: 'base32',
    token,
    window: 14 // Allowing for a 7-minute (14 x 30 sec) time window
  })
  if (!isVerified) {
    throw new UnauthorizedError('Invalid or expired OTP')
  }
  // @ts-expect-error
  profile.otp = token.toString() + "ex"
  profile.otpExpires = new Date(Date.now() + OTP_EXPIRY)
  await profile.save()
  return { message: 'OTP verified successfully', expires: profile.otpExpires }
}
export async function signUp({
  phone,
  firstName,
  lastName,
  email,
  password,
  otp
}: UserParams): Promise<IUserDocument> {
  if (!validatePhone(phone)) {
    throw new ValidationError('Invalid phone number')
  }
  const profile = await PreSignupModel.findOne({ phone })
  if (profile == null) {
    throw new NotFoundError('User with phone number not found')
  }
  if (profile.otpExpires < new Date(Date.now())) {
    throw new ForbiddenError('OTP expired request a new one')
  }
  // @ts-expect-error
  if (profile.otp != otp)
    throw new ForbiddenError('Invalid otp request a new one')
  // @ts-expect-error
  delete profile.otp
  profile.otpExpires = new Date(Date.now())
  await profile.save()
  if (
    (await UserModel.countDocuments({ $or: [{ email }, { phone }] }).exec()) > 0
  ) {
    throw new IntegrityError(
      'An account with that email or phone number already exists'
    )
  }
  try {
    validateUser({ firstName, lastName, email, phone, password })
  } catch (err) {
    if (err instanceof Error) {
      throw new ValidationError(err.message)
    } else {
      throw new ValidationError('Unknown error occurred')
    }
  }
  const hashedPassword = encryptPassword(password)
  const user = await UserModel.create({
    firstName,
    lastName,
    phone,
    email,
    password: hashedPassword
  })
  await PreSignupModel.deleteOne({ _id: profile._id })
  return user
}
export async function login(
  email: string,
  password: string
): Promise<IUserDocument> {
  const user = await UserModel.findOne({ email })
  if (!user) throw new NotFoundError(`User with email ${email} not found`)
  if (!verifyPassword(password, user.password)) {
    throw new UnauthorizedError('Invalid password', 401, 'Login failed')
  }
  return user
}
export async function getUser(id: Types.ObjectId): Promise<IUserDocument> {
  const user = await UserModel.findOne({ _id: id }).lean().exec()
  if (user == null) throw new NotFoundError('User not found')
  return user
}
export async function updateUser(
  id: Types.ObjectId,
  { phone, firstName, lastName, email, password }: Partial<UserParams>
): Promise<IUserDocument> {
  const updateData: any = {} // Partial<UserParams> = {};

  if (phone) {
    if (!validatePhone(phone)) {
      throw new ValidationError('Invalid phone number')
    }
    updateData.phone = phone
  }

  if (firstName) updateData.firstName = firstName
  if (lastName) updateData.lastName = lastName
  if (email) updateData.email = email
  if (password) {
    updateData.password = encryptPassword(password)
    updateData.lastAuthChange = new Date(Date.now())
  }

  const updatedUser = await UserModel.findByIdAndUpdate(id, updateData, {
    new: true
  })
    .lean()
    .exec()
  if (!updatedUser) {
    throw new NotFoundError('User not found')
  }
  return updatedUser
}
export async function deleteUser(id: Types.ObjectId): Promise<IUserDocument> {
  const results = await Promise.allSettled([
    deleteProfile(id),
    deletePreference(id)
  ]);
  results.forEach(result => {
    if (result.status === 'rejected' && !(result.reason instanceof NotFoundError)) {
      throw result.reason
    }
  });
  const user = await UserModel.findOneAndDelete({ _id: id });
  if (user == null) throw new NotFoundError('User not found');
  return user;
}
export async function getUsers({
  filters = {},
  page = 1,
  limit = 10,
  order = -1,
  sortField = 'email'
}: {
  filters: FilterQuery<IUserDocument>
  page: number
  limit: number
  order: SortOrder
  sortField: string
}): Promise<PaginatedDocs<IUserDocument>> {
  const fieldsToExclude = ['-password', '-secret', '-otpExpires', '-lastAuthChange', '-__v']
  return await paginate(UserModel, filters, { page, limit, sortField, sortOrder: order }, fieldsToExclude)